#define INF 1E18
#define PI 3.1415926
#define IVPI 0.3183098
#define EPS 0.0001
#define RAY_EPS 0.01

int roundint(float x) {
    float b = step(x, 0);
    return int(x - b + 0.5);
}
float len2(vec3 x) {
    return x.x * x.x + x.y * x.y + x.z * x.z;
}
float pow2(float x) {
    return x * x;
}
float pow5(float x) {
    float x2 = x * x;
    return x2 * x2 * x;
}
vec3 powv(vec3 v, float n) {
    return vec3(pow(v.x, n), pow(v.y, n), pow(v.z, n));
}

// N(same direction with I)
vec3 refract(vec3 I, vec3 N, float eta) {
    float c1 = dot(N, -I);
    float s1 = sqrt(1 - c1 * c1);
    float s2 = s1 / eta;
    if(s2 >= 1) return vec3(0); // full reflect
    float c2 = sqrt(1 - s2 * s2);
    return -N * c2 + (I + N * c1) / eta;
}

float SchlickGGX(float NdotV, float roughness) {
	float k = pow2(roughness + 1) / 8;
	return NdotV / (NdotV * (1 - k) + k);
}

// G / (2 * NdotV)
float SchlickGGXi2(float NdotV, float roughness) {
	float k = pow2(roughness + 1) / 8;
	return 0.5 / (NdotV * (1 - k) + k);
}

float DGGX(float NdotH, float a) {
	float a2 = a * a;
	float t = 1 + (a2-1)*NdotH*NdotH;
	return a2 / (PI * t*t);
}
vec3 SchlickFresnel(vec3 f0, float c) {
	return f0 + (vec3(1) - f0) * pow5(1 - c);
}
float fresnel(float cosI, float etaI, float etaT) {
	float sinI = sqrt(1.0 - cosI * cosI);
	float sinT = etaI / etaT * sinI;
	if(sinT > 1) return 1; // Full reflect
	float cosT = sqrt(1.0 - sinT * sinT);
	float Rl = pow2((etaI * cosI - etaT * cosT) / (etaI * cosI + etaT * cosT));
	float Rp = pow2((etaI * cosT - etaT * cosI) / (etaI * cosT + etaT * cosI));
	return (Rl + Rp) / 2;
}